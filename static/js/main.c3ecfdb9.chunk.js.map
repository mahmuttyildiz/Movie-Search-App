{"version":3,"sources":["Components/MoviesCard.js","Components/SearchMovies.js","App.js","serviceWorker.js","index.js"],"names":["MoviesCard","movie","className","src","poster_path","alt","title","release_date","vote_average","overview","SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","console","log","results","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4PAmBeA,MAjBf,YAA8B,IAATC,EAAQ,EAARA,MACjB,OACI,yBAAKC,UAAU,QACH,yBAAMC,IAAG,0DAAqDF,EAAMG,aAChEC,IAAKJ,EAAMK,MAAQ,UACnBJ,UAAU,cAEd,yBAAKA,UAAU,eACX,wBAAIA,UAAU,aAAaD,EAAMK,OACjC,2BAAG,gDAAsBL,EAAMM,eAC/B,2BAAG,0CAAgBN,EAAMO,eACzB,uBAAGN,UAAU,YAAYD,EAAMQ,aC2BxCC,MApCf,WAAyB,IAAD,EACMC,mBAAS,IADf,mBACbC,EADa,KACNC,EADM,OAEQF,mBAAS,IAFjB,mBAEbG,EAFa,KAELC,EAFK,KAIdC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACrBD,EAAEE,iBAEIC,EAHe,kHAGkGR,EAHlG,iDAMCS,MAAMD,GANP,cAMXE,EANW,gBAOEA,EAAIC,OAPN,OAOXC,EAPW,OAQjBC,QAAQC,IAAIF,GACZT,EAAUS,EAAKG,SATE,kDAWjBF,QAAQG,MAAR,MAXiB,0DAAH,sDAgBlB,OACI,oCACA,0BAAM1B,UAAU,OAAO2B,SAAUb,GAC7B,2BAAOc,QAAQ,QAAQ5B,UAAU,SAAjC,gBACA,2BAAOA,UAAU,QAAQ6B,KAAK,OAAOC,KAAK,QAAQC,YAAY,iBAAiBC,MAAOtB,EAAOuB,SAAU,SAAClB,GAAD,OAAOJ,EAASI,EAAEmB,OAAOF,UAChI,4BAAQH,KAAK,SAAS7B,UAAU,UAAhC,WAEJ,yBAAKA,UAAU,YACVY,EAAOuB,QAAO,SAAApC,GAAK,OAAIA,EAAMG,eAAakC,KAAI,SAAArC,GAAK,OAChD,kBAAC,EAAD,CAAYA,MAAOA,EAAOsC,IAAKtC,EAAMuC,WCjBtCC,MAZf,WACI,OACE,oCACA,yBAAKvC,UAAU,aACf,wBAAIA,UAAU,SAAd,iBACC,kBAAC,EAAD,SCGawC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACLH,QAAQG,MAAMA,EAAM8B,a","file":"static/js/main.c3ecfdb9.chunk.js","sourcesContent":["import React from 'react';\n\nfunction MoviesCard({movie}) {\n    return (\n        <div className=\"card\">\n                    <img  src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n                        alt={movie.title + ' poster'}\n                        className=\"cardImage\"\n                    />\n                    <div className=\"cardContent\">\n                        <h3 className=\"cardTitle\">{movie.title}</h3>\n                        <p><small>Release Date: {movie.release_date}</small></p>\n                        <p><small>Rating: {movie.vote_average}</small></p>\n                        <p className=\"cardDesc\">{movie.overview}</p>\n                    </div>\n        </div>\n    )\n}\n\nexport default MoviesCard;","import React, {useState} from 'react';\nimport MoviesCard from \"./MoviesCard.js\"\n\n\nfunction SearchMovies() {\n    const [query, setQuery] = useState('');\n    const [movies, setMovies] = useState([]);\n\n    const searchMovies = async (e) => {\n    e.preventDefault();\n    \n    const url = `https://api.themoviedb.org/3/search/movie?api_key=722794eadb8351ced9465ab3563f025c&language=en-US&query=${query}&page=1&include_adult=false`;\n\n    try{\n        const res = await fetch(url);\n        const data = await res.json();\n        console.log(data);\n        setMovies(data.results);\n    } catch(err) {\n        console.error(err);\n    }\n\n    }\n\n    return (\n        <>\n        <form className=\"form\" onSubmit={searchMovies}>\n            <label htmlFor=\"query\" className=\"label\" >Movie Name: </label>\n            <input className=\"input\" type=\"text\" name=\"query\" placeholder=\"Search a movie\" value={query} onChange={(e) => setQuery(e.target.value)}/>\n            <button type=\"submit\" className=\"button\">Search</button>\n        </form>\n        <div className=\"cardList\">\n            {movies.filter(movie => movie.poster_path).map(movie => (\n                <MoviesCard movie={movie} key={movie.id} />\n            ))}\n        </div>\n        </>\n    )\n}\n\nexport default SearchMovies;","import React from 'react';\nimport './App.css';\nimport SearchMovies from './Components/SearchMovies.js'\n\nfunction App() {\n    return (\n      <>\n      <div className=\"container\">\n      <h1 className=\"title\">Search Movies</h1>\n       <SearchMovies/>\n      </div>\n        \n      </>\n    );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}